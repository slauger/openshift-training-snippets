apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    #image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"hello-openshift:latest","namespace":"default"},"fieldPath":"spec.template.spec.containers[?(@.name==\"hello-openshift\")].image","pause":"false"}]'
  labels:
    app: {{ .Release.Name }}
  name: {{ .Release.Name }}
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        app: {{ .Release.Name }}
    spec:
      serviceAccount: {{ .Release.Name }}
      serviceAccountName: {{ .Release.Name }}
      containers:
      - image: {{ .Values.images.proxy }}
        imagePullPolicy: Always
        name: oauth-proxy
        ports:
        - containerPort: 8443
          protocol: TCP
        args:
        - -provider=openshift
        - -cookie-secret={{ .Values.cookie.secret }}
        - -https-address=:8443
        - -email-domain=*
        - -upstream=http://localhost:8080
        - -tls-cert=/etc/tls/private/tls.crt
        - -tls-key=/etc/tls/private/tls.key
        - -openshift-service-account={{ .Release.Name }}
        - -skip-auth-regex=^/metrics
        volumeMounts:
          - name: tls-cert
            mountPath: /etc/tls/private
          - name: tls-ca
            mountPath: /etc/tls/ca
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - image: {{ .Values.images.app }}
        imagePullPolicy: Always
        name: hello-openshift
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: https
          containerPort: 8443
          protocol: TCP
        env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      volumes:
        - name: tls-cert
          secret:
            secretName: {{ .Release.Name }}-tls-cert
            defaultMode: 420
        - name: tls-ca
          configMap:
            name: {{ .Release.Name }}-tls-ca
            defaultMode: 420
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: {{ .Release.Name }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
